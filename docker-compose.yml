version: '3.8'

services:
  # Internal PostgreSQL database for storing collected queries and analysis results
  internal-db:
    image: postgres:15
    container_name: ai-analyzer-internal-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ai_core
      POSTGRES_PASSWORD: ai_core
      POSTGRES_DB: ai_core
    ports:
      - "5440:5432"
    volumes:
      - ./backend/db/init_schema.sql:/docker-entrypoint-initdb.d/init_schema.sql:ro
      - ./data/internal-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_core"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and task queue (optional for APScheduler, required for Celery)
  redis:
    image: redis:7-alpine
    container_name: ai-analyzer-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai-analyzer-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Internal DB connection
      INTERNAL_DB_HOST: internal-db
      INTERNAL_DB_PORT: 5432
      INTERNAL_DB_USER: ai_core
      INTERNAL_DB_PASSWORD: ai_core
      INTERNAL_DB_NAME: ai_core

      # Redis connection
      REDIS_HOST: redis
      REDIS_PORT: 6379

      # Lab databases (external)
      MYSQL_HOST: host.docker.internal
      MYSQL_PORT: 3307
      MYSQL_USER: root
      MYSQL_PASSWORD: root
      MYSQL_DB: labdb

      PG_HOST: host.docker.internal
      PG_PORT: 5433
      PG_USER: postgres
      PG_PASSWORD: root
      PG_DB: labdb

      # Application settings
      LOG_LEVEL: INFO
      ENV: development

      # AI Provider Settings
      AI_PROVIDER: ${AI_PROVIDER:-openai}
      AI_API_KEY: ${AI_API_KEY:-}
      AI_MODEL: ${AI_MODEL:-gpt-4o-mini}
    depends_on:
      internal-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai-analyzer-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    environment:
      VITE_API_URL: http://localhost:8000
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules

networks:
  default:
    name: ai-analyzer-network
